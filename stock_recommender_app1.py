# -*- coding: utf-8 -*-
"""stock_recommender_app1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ToOhYF7edqPcaLi08w1I6lUcuRCNXAgh

## ***AI-Powered Stock Market Trend Predictor***

### **Technical Design and AI/ML Design: Implementation Steps**

# Step 1: Data Collection
"""

#!pip install fredapi
#!pip install yfinance

import yfinance as yf
from fredapi import Fred

# FRED API setup
fred = Fred(api_key='65ee804fa7284404e607446dc591c8b8')

# Fetch stock data
def fetch_stock_data(stock_symbol, start_date, end_date):
    return yf.download(stock_symbol, start=start_date, end=end_date)

# Fetch economic indicators
def fetch_economic_data(series_id, start_date, end_date):
    return fred.get_series(series_id, observation_start=start_date, observation_end=end_date)

"""# Step 2: Data Preprocessing"""

import numpy as np
from sklearn.preprocessing import MinMaxScaler

# Normalize data
scaler = MinMaxScaler(feature_range=(0, 1))

def preprocess_data(data, window_size):
    # Ensure 'data' is a NumPy array
    if isinstance(data, np.ndarray):
        scaled_data = scaler.fit_transform(data.reshape(-1, 1))
    else:
        scaled_data = scaler.fit_transform(data.to_numpy().reshape(-1, 1))

    x, y = [], []
    for i in range(window_size, len(scaled_data)):
        x.append(scaled_data[i-window_size:i, 0])
        y.append(scaled_data[i, 0])
    x = np.array(x)
    y = np.array(y)
    return x, y

"""
# Step 3: Model Training"""

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense, Dropout
import yfinance as yf # Importing yfinance to fetch data

# Build LSTM model
def build_model(input_shape):
    model = Sequential([
        LSTM(units=50, return_sequences=True, input_shape=input_shape),
        Dropout(0.2),
        LSTM(units=50, return_sequences=False),
        Dropout(0.2),
        Dense(units=1)
    ])
    model.compile(optimizer='adam', loss='mean_squared_error')
    return model

# Training the model
sequence_length = 60
# Fetching stock data for AAPL from 2010-01-01 to 2023-12-31
data = yf.download("AAPL", start="2010-01-01", end="2023-12-31")
x, y = preprocess_data(data['Close'], sequence_length)
train_size = int(len(x) * 0.8)
x_train, y_train = x[:train_size], y[:train_size]
x_test, y_test = x[train_size:], y[train_size:]
x_train = x_train.reshape((x_train.shape[0], x_train.shape[1], 1))
x_test = x_test.reshape((x_test.shape[0], x_test.shape[1], 1))

model = build_model((x_train.shape[1], 1))
model.fit(x_train, y_train, epochs=10, batch_size=32)

"""
# Step 4: Web Application Development


"""

#!pip install streamlit

import streamlit as st
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np

# Title and Introduction
st.markdown(
    """
    <style>
        .main-title {
            text-align: center;
            font-size: 2.5rem;
            font-weight: bold;
            color: #4CAF50;
        }
        .sub-title {
            text-align: center;
            font-size: 1.25rem;
            color: #555;
        }
        .section-header {
            font-size: 1.5rem;
            font-weight: bold;
            margin-top: 2rem;
            color: #0078D7;
        }
    </style>
    """,
    unsafe_allow_html=True,
)

st.markdown('<div class="main-title">AI-Powered Stock Market Trend Predictor</div>', unsafe_allow_html=True)
st.markdown('<div class="sub-title">Analyze and predict stock trends with advanced AI models</div>', unsafe_allow_html=True)

# Input Section
st.markdown('<div class="section-header">Enter Stock Details</div>', unsafe_allow_html=True)
stock_symbol = st.text_input("Stock Symbol (e.g., AAPL):", "AAPL", help="Enter the ticker symbol of the stock")
date_range = st.date_input(
    "Select Date Range:",
    [pd.to_datetime("2010-01-01"), pd.to_datetime("2023-12-31")],
    help="Choose the date range for fetching stock data",
)

if st.button("Fetch Data"):
    start_date, end_date = date_range
    data = fetch_stock_data(stock_symbol, start_date.strftime("%Y-%m-%d"), end_date.strftime("%Y-%m-%d"))

    # Historical Stock Prices
    st.markdown('<div class="section-header">Historical Stock Prices</div>', unsafe_allow_html=True)
    fig, ax = plt.subplots()
    ax.plot(data.index, data['Close'], label="Close Price", color='#1f77b4')
    ax.set_title(f"Stock Prices for {stock_symbol}")
    ax.set_xlabel("Date")
    ax.set_ylabel("Close Price ($)")
    ax.grid(True, linestyle='--', alpha=0.6)
    ax.legend()
    st.pyplot(fig)

    # Predicted Stock Prices
    st.markdown('<div class="section-header">Predicted Stock Prices</div>', unsafe_allow_html=True)
    x, y = preprocess_data(data['Close'].values, 60)
    x_test = x[-int(len(x) * 0.2):]
    predictions = model.predict(x_test)
    predicted_prices = scaler.inverse_transform(predictions)

    fig, ax = plt.subplots()
    ax.plot(range(len(predicted_prices)), predicted_prices, label="Predicted Prices", color='#ff7f0e')
    ax.set_title("Predicted Stock Price Trends")
    ax.set_xlabel("Time Steps")
    ax.set_ylabel("Predicted Price ($)")
    ax.grid(True, linestyle='--', alpha=0.6)
    ax.legend()
    st.pyplot(fig)

# Footer
st.markdown(
  '<footer>Â© 2024 AI Stock Predictor | Powered by Streamlit</footer>',
  unsafe_allow_html=True,
)